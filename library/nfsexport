#!/usr/bin/env python
# -*- coding: utf-8 -*-#
# @(#)nfsexport
#
#
# Copyright (C) 2013, GC3, University of Zurich. All rights reserved.
#
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

__docformat__ = 'reStructuredText'


DOCUMENTATION = """
---
module: nfsexport
short_description: This module will configure a nfs exports
description:
    - This module will configure an export by writing an entry in the ``/etc/exports`` file.
author: Antonio Messina <antonio.s.messina@gmail.com>
options:
    path:
        description:
            - Directory to export
        required: true
    dest:
        description:
            - export file to write
        required: false
        default: /etc/exports
    clients:
        description:
            - Address o list of addresses of the nfs clients
        required: false
        default: "'*', which means `all`"
    fsid:
        description:
             - Activates the use of fsid. It increase the fsid with every exported path
        required: no
        default: True
    options:
        description:
            - nfs export options
        required: false
        default: ro,root_squash, no_subtree_check
"""
EXAMPLES = '''
# Export /home read writeable for 10.0.0.1
- code: nfsexport path=/home clients=10.0.0.1 options=rw

# Export the directory /var/www for the subnet 192.168.1.0/26 with fsid support
- code: nfsexport path=/var/www/ clients=192.168.1.0/26 options=rw,sync fsid=True
'''
import os
import itertools

# Get the highest used FSID and add 1
def get_new_fsid(module):
    fsid = 0
    current_exports = open(module.params['dest']).readlines()
    for i, line in enumerate(current_exports):
        # Split line by fsid if found
        if "fsid" in line:
            fsid_split = line.strip().split("fsid=", 2)
            fsid_in_line = int("".join(itertools.takewhile(str.isdigit, fsid_split[1])))
            if fsid_in_line > fsid:
                fsid = fsid_in_line
    return str(fsid + 1)

# Returns the fsid of the exported path. If no fsid is used it returns False
def get_fsid_of_path(module, path):
    current_exports = open(module.params['dest']).readlines()
    for i, line in enumerate(current_exports):
        # To avoid errors with empty lines
        try:
            line_path = line.split()[0].strip()
        except:
            pass
        if path == line_path:
            if "fsid" in line:
                fsid_split = line.strip().split("fsid=", 2)
                fsid_in_line = "".join(itertools.takewhile(str.isdigit, fsid_split[1]))
                return fsid_in_line
            else:
                return False

def main():
    module = AnsibleModule(
        argument_spec = dict(
            path      = dict(required=True),
            dest      = dict(required=False, default='/etc/exports'),
            clients   = dict(required=False, default='*'),
            fsid      = dict(required=False, default=True, type='bool'),
            options   = dict(required=False, default='ro,root_squash,no_subtree_check'),
            )
        )

    params = module.params
    # raise an error if destination is not writeable
    if os.path.isfile(params['dest']) and not os.access(params['dest'], os.W_OK):
        module.fail_json(msg="Destination %s not writable. Maybe run as root." % (params['dest']))
    params['path'] = params['path'].strip()

    # Check if path directory exist
    if not os.path.isdir(params['path']):
        module.fail_json(msg="Path %s is not a directory or does not exists!" % params['path'])

    client_list = params['clients'].split(',')
    exports = []

    # Check if destination file exists already and is not empty
    if os.path.exists(params['dest']) and os.stat(params['dest']).st_size > 0:
        current_exports = open(params['dest'], 'r').readlines()
        # Check if the parameters match an export which is already
        # defined
        for i, line in enumerate(current_exports):
            try:  # To avoid errors with empty lines
                path = line.split()[0].strip()
            except:
                pass
            if path == params['path']:
                if params['fsid']:
                    fsid_of_path = get_fsid_of_path(module, path)  # Check if path already has a fsid
                    if not fsid_of_path:
                        params['options'] = params['options'] + ",fsid=" + get_new_fsid(module)
                    else:
                        params['options'] = params['options'] + ",fsid=" + fsid_of_path

                for client in client_list:
                    exports.append("%s(%s)" % (client, params['options']))
                clients = str.join(' ', exports)
                exportline = "%s %s\n" % (params['path'], clients)

                if line.split(' ', 1)[1].strip() == clients:
                    # It matches, but it's not changed.
                    module.exit_json(changed=False, msg="already exported", share=params['path'])
                else:
                    # It matches, and it's changed. Update the file!
                    current_exports[i] = exportline
                    fd = open(params['dest'], 'w')
                    fd.writelines(current_exports)
                    fd.close()
                    module.exit_json(changed=True, share=params['path'])

    # Destination or path does not exist.

    if params['fsid']:
        params['options'] = params['options'] + ",fsid=" + get_new_fsid(module)

    for client in client_list:
        exports.append("%s(%s)" % (client, params['options']))
    clients = str.join(' ', exports)
    exportline = "%s %s\n" % (params['path'], clients)

    # Export path not present, proceed and add one.
    fd = open(params['dest'], 'a')
    fd.write(exportline)
    fd.close()
    module.exit_json(changed=True, share=params['path'])


# include magic from lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
